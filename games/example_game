<!DOCTYPE html>
<html>
	<head>
		<title>Example Game for Play-For-X</title>
		<script src="../static/jquery.min.js"></script>
		<script src="../static/raphael-min.js"></script>
		<script type="text/javascript">
			// Configuration controls the state of the game when it's initialized - how many enemies are you fighting?
			// How fast does it scroll? This is the kind of thing that gets set by the DM when they fine-tune a minigame.
			var configuration = {};
			// Here we set a default number of targets. This could, alternately, be set by the server (in which case
			// it'd be curlybrace curlybracetemplated ) or possibly just by the page that loads it passing in a configuration.
			configuration.number_of_targets = 5;

			// The state object might not actually be necessary. In theory, it's just used for containing all the stuff
			// that would otherwise be chucked into global variables. I think the only reason I have it here is to 
			// distinguish it from the data that goes in the results object.
			var state = {};

			// Results simply stores the final results of the minigame, with things like score, time to completion, and
			// so on. This might not be exactly the object that gets sent back to the game server, but it contains all
			// that information - the final server response can be constructed entirely from the results object.
			var results = {};

			$(document).ready(function() {
				// The WebSocket connecting us to the game server. This doesn't actually need to be a websocket, unless
				// we want to, at some point, add the functionality for watching someone else play their game.
				var wsurl = "ws://li60-203.members.linode.com/results";
				wsurl = wsurl + "?room=" + encodeURIComponent("{{ room }}");
				wsurl = wsurl + "&name=" + encodeURIComponent("{{ user }}");
				var game_ws = new WebSocket(wsurl);

				// Page initialization. Most games will have a blindfold and hide everything else, or something. I think.
				$('#arena').hide();
				$('#blindfold').show();


				function click_handler (evt) {
					state.number_of_targets -= 1;
					results.score += 1;
					if (state.number_of_targets == 0) {
						results.won_by_playing = true;
						game_end();
					}
				}

				// Initialize the game state. This should generate enemies, obstacles, targets, etc as necessary, and
				// according to the config argument.
				function game_initialize (config) {
					results.score = 0;
					results.time_to_win;
					results.won_by_playing = false;

					state.number_of_targets = config.number_of_targets
						
					$('#arena').on('click', click_handler);
				}

				// This actually begins gameplay. When the player clicks "start", this happens and they have to start playing.
				function game_start () {
					state.start_time = new Date();

					// Game automatically ends after five seconds.
					state.interval_id = setTimeout(game_end, 5000);
				}

				// Game end conditions are here. This can happen in a variety of ways, so it's best to put it in a function
				// of its own. This sends results to the server and/or tells the player how they did. In theory, in this 
				// function the logic might happen to tell the chat window we're in to undisplay our iframe.
				function game_end () {
					// Make sure the game's not still counting down for a pending end of game.
					clearTimeout(state.interval_id);

					// Do the computations required for figuring out the score and stuff.
					var current_time = new Date();
					results.time_to_win = current_time - state.start_time;

					// Tell them how they did by appending some text to the #report tag. This can be removed.
					$('#report').append($('<h3>Good job! You got ' + results.score + ' points after ' + results.time_to_win + 'ms!</h3>'));

					// Report how they did to the console, for good measure. Don't bother taking this out, it could be useful.
					console.log('Game ended with results:');
					console.log(results);
					console.log('And final state:');
					console.log(state);

					// Make sure the game stops playing.
					game_trash();
					
					// Send results to the server.
					// Not yet written.
				}

				// Uninitialize the game - basically, do the opposite of game_initialize. Delete elements, unregister handlers, etc.
				function game_trash () {
					// I'm honestly not sure whether event handler deregistration should happen in the game de-initializer or
					// in the game_end function. I guess that the handler *registration* should happen in the initializer, which
					// answers the question fine.
					$('#arena').off('click', click_handler);
				}

				game_initialize(configuration);

				$('#blindfold').on('click', function() {
					// Removing the blindfold has to be doable in some better way.
					$('#arena').show();
					$('#blindfold').hide();
					game_start();
				});
			});
		</script>
		<style type="text/css">
			#blindfold {
				background-color: red;
				padding: 5em;
				width: 100%;
			}
			#arena {
				width: 100%;
				background-color: gray;
				height: 20em;
			}
		</style>
	</head>
	<body>
		<div id="blindfold">
			Click to start!<br />
			Then, click inside the grey area to accumulate points!<br />
			If you get five points, you win!<br />
			Time limit: 5 seconds!<br />
		</div>
		<div id="arena"></div>
	</body>
</html>
